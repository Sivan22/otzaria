This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
search_engine.dart
src/rust/api/reference_search_engine.dart
src/rust/api/search_engine.dart
src/rust/frb_generated.dart
src/rust/frb_generated.io.dart
src/rust/frb_generated.web.dart
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="search_engine.dart">
library search_engine;

export 'src/rust/api/search_engine.dart';
export 'src/rust/api/reference_search_engine.dart';
export 'src/rust/frb_generated.dart' show RustLib;
</file>

<file path="src/rust/api/reference_search_engine.dart">
// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'search_engine.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Box < dyn Query >>>
abstract class BoxQuery implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Index>>
abstract class Index implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ReferenceSearchEngine>>
abstract class ReferenceSearchEngine implements RustOpaqueInterface {
  Future<void> addDocument(
      {required BigInt id,
      required String title,
      required String reference,
      required String shortRef,
      required BigInt segment,
      required bool isPdf,
      required String filePath});

  Future<void> clear();

  Future<void> commit();

  Future<int> count({required String query, required bool fuzzy});

  static Future<BoxQuery> createSearchQuery(
          {required Index index,
          required String searchTerm,
          required bool fuzzy}) =>
      RustLib.instance.api
          .crateApiReferenceSearchEngineReferenceSearchEngineCreateSearchQuery(
              index: index, searchTerm: searchTerm, fuzzy: fuzzy);

  factory ReferenceSearchEngine({required String path}) => RustLib.instance.api
      .crateApiReferenceSearchEngineReferenceSearchEngineNew(path: path);

  Future<List<ReferenceSearchResult>> search(
      {required String query,
      required int limit,
      required bool fuzzy,
      required ResultsOrder order});
}

class ReferenceSearchResult {
  final String title;
  final String reference;
  final String shortRef;
  final BigInt id;
  final BigInt segment;
  final bool isPdf;
  final String filePath;

  const ReferenceSearchResult({
    required this.title,
    required this.reference,
    required this.shortRef,
    required this.id,
    required this.segment,
    required this.isPdf,
    required this.filePath,
  });

  @override
  int get hashCode =>
      title.hashCode ^
      reference.hashCode ^
      shortRef.hashCode ^
      id.hashCode ^
      segment.hashCode ^
      isPdf.hashCode ^
      filePath.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ReferenceSearchResult &&
          runtimeType == other.runtimeType &&
          title == other.title &&
          reference == other.reference &&
          shortRef == other.shortRef &&
          id == other.id &&
          segment == other.segment &&
          isPdf == other.isPdf &&
          filePath == other.filePath;
}
</file>

<file path="src/rust/api/search_engine.dart">
// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'reference_search_engine.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SearchEngine>>
abstract class SearchEngine implements RustOpaqueInterface {
  Future<void> addDocument(
      {required BigInt id,
      required String title,
      required String reference,
      required String topics,
      required String text,
      required BigInt segment,
      required bool isPdf,
      required String filePath});

  Future<void> clear();

  Future<void> commit();

  Future<int> count(
      {required List<String> regexTerms,
      required List<String> facets,
      required int slop,
      required int maxExpansions});

  static Future<BoxQuery> createQuery(
          {required Index index,
          required List<String> regexTerms,
          required List<String> facets,
          required int slop,
          required int maxExpansions}) =>
      RustLib.instance.api.crateApiSearchEngineSearchEngineCreateQuery(
          index: index,
          regexTerms: regexTerms,
          facets: facets,
          slop: slop,
          maxExpansions: maxExpansions);

  factory SearchEngine({required String path}) =>
      RustLib.instance.api.crateApiSearchEngineSearchEngineNew(path: path);

  Future<void> removeDocumentsByTitle({required String title});

  Future<List<SearchResult>> search(
      {required List<String> regexTerms,
      required List<String> facets,
      required int limit,
      required int slop,
      required int maxExpansions,
      required ResultsOrder order});
}

enum ResultsOrder {
  catalogue,
  relevance,
  ;
}

class SearchResult {
  final String title;
  final String reference;
  final String text;
  final BigInt id;
  final BigInt segment;
  final bool isPdf;
  final String filePath;

  const SearchResult({
    required this.title,
    required this.reference,
    required this.text,
    required this.id,
    required this.segment,
    required this.isPdf,
    required this.filePath,
  });

  @override
  int get hashCode =>
      title.hashCode ^
      reference.hashCode ^
      text.hashCode ^
      id.hashCode ^
      segment.hashCode ^
      isPdf.hashCode ^
      filePath.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SearchResult &&
          runtimeType == other.runtimeType &&
          title == other.title &&
          reference == other.reference &&
          text == other.text &&
          id == other.id &&
          segment == other.segment &&
          isPdf == other.isPdf &&
          filePath == other.filePath;
}
</file>

<file path="src/rust/frb_generated.dart">
// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/reference_search_engine.dart';
import 'api/search_engine.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 271381323;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'search_engine',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiReferenceSearchEngineReferenceSearchEngineAddDocument(
      {required ReferenceSearchEngine that,
      required BigInt id,
      required String title,
      required String reference,
      required String shortRef,
      required BigInt segment,
      required bool isPdf,
      required String filePath});

  Future<void> crateApiReferenceSearchEngineReferenceSearchEngineClear(
      {required ReferenceSearchEngine that});

  Future<void> crateApiReferenceSearchEngineReferenceSearchEngineCommit(
      {required ReferenceSearchEngine that});

  Future<int> crateApiReferenceSearchEngineReferenceSearchEngineCount(
      {required ReferenceSearchEngine that,
      required String query,
      required bool fuzzy});

  Future<BoxQuery>
      crateApiReferenceSearchEngineReferenceSearchEngineCreateSearchQuery(
          {required Index index,
          required String searchTerm,
          required bool fuzzy});

  ReferenceSearchEngine crateApiReferenceSearchEngineReferenceSearchEngineNew(
      {required String path});

  Future<List<ReferenceSearchResult>>
      crateApiReferenceSearchEngineReferenceSearchEngineSearch(
          {required ReferenceSearchEngine that,
          required String query,
          required int limit,
          required bool fuzzy,
          required ResultsOrder order});

  Future<void> crateApiSearchEngineSearchEngineAddDocument(
      {required SearchEngine that,
      required BigInt id,
      required String title,
      required String reference,
      required String topics,
      required String text,
      required BigInt segment,
      required bool isPdf,
      required String filePath});

  Future<void> crateApiSearchEngineSearchEngineClear(
      {required SearchEngine that});

  Future<void> crateApiSearchEngineSearchEngineCommit(
      {required SearchEngine that});

  Future<int> crateApiSearchEngineSearchEngineCount(
      {required SearchEngine that,
      required List<String> regexTerms,
      required List<String> facets,
      required int slop,
      required int maxExpansions});

  Future<BoxQuery> crateApiSearchEngineSearchEngineCreateQuery(
      {required Index index,
      required List<String> regexTerms,
      required List<String> facets,
      required int slop,
      required int maxExpansions});

  SearchEngine crateApiSearchEngineSearchEngineNew({required String path});

  Future<void> crateApiSearchEngineSearchEngineRemoveDocumentsByTitle(
      {required SearchEngine that, required String title});

  Future<List<SearchResult>> crateApiSearchEngineSearchEngineSearch(
      {required SearchEngine that,
      required List<String> regexTerms,
      required List<String> facets,
      required int limit,
      required int slop,
      required int maxExpansions,
      required ResultsOrder order});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxQuery;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxQuery;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BoxQueryPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Index;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Index;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_IndexPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ReferenceSearchEngine;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ReferenceSearchEngine;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ReferenceSearchEnginePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SearchEngine;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SearchEngine;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SearchEnginePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiReferenceSearchEngineReferenceSearchEngineAddDocument(
      {required ReferenceSearchEngine that,
      required BigInt id,
      required String title,
      required String reference,
      required String shortRef,
      required BigInt segment,
      required bool isPdf,
      required String filePath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
            that, serializer);
        sse_encode_u_64(id, serializer);
        sse_encode_String(title, serializer);
        sse_encode_String(reference, serializer);
        sse_encode_String(shortRef, serializer);
        sse_encode_u_64(segment, serializer);
        sse_encode_bool(isPdf, serializer);
        sse_encode_String(filePath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiReferenceSearchEngineReferenceSearchEngineAddDocumentConstMeta,
      argValues: [
        that,
        id,
        title,
        reference,
        shortRef,
        segment,
        isPdf,
        filePath
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReferenceSearchEngineReferenceSearchEngineAddDocumentConstMeta =>
          const TaskConstMeta(
            debugName: "ReferenceSearchEngine_add_document",
            argNames: [
              "that",
              "id",
              "title",
              "reference",
              "shortRef",
              "segment",
              "isPdf",
              "filePath"
            ],
          );

  @override
  Future<void> crateApiReferenceSearchEngineReferenceSearchEngineClear(
      {required ReferenceSearchEngine that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiReferenceSearchEngineReferenceSearchEngineClearConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReferenceSearchEngineReferenceSearchEngineClearConstMeta =>
          const TaskConstMeta(
            debugName: "ReferenceSearchEngine_clear",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiReferenceSearchEngineReferenceSearchEngineCommit(
      {required ReferenceSearchEngine that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiReferenceSearchEngineReferenceSearchEngineCommitConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReferenceSearchEngineReferenceSearchEngineCommitConstMeta =>
          const TaskConstMeta(
            debugName: "ReferenceSearchEngine_commit",
            argNames: ["that"],
          );

  @override
  Future<int> crateApiReferenceSearchEngineReferenceSearchEngineCount(
      {required ReferenceSearchEngine that,
      required String query,
      required bool fuzzy}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
            that, serializer);
        sse_encode_String(query, serializer);
        sse_encode_bool(fuzzy, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiReferenceSearchEngineReferenceSearchEngineCountConstMeta,
      argValues: [that, query, fuzzy],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReferenceSearchEngineReferenceSearchEngineCountConstMeta =>
          const TaskConstMeta(
            debugName: "ReferenceSearchEngine_count",
            argNames: ["that", "query", "fuzzy"],
          );

  @override
  Future<BoxQuery>
      crateApiReferenceSearchEngineReferenceSearchEngineCreateSearchQuery(
          {required Index index,
          required String searchTerm,
          required bool fuzzy}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
            index, serializer);
        sse_encode_String(searchTerm, serializer);
        sse_encode_bool(fuzzy, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiReferenceSearchEngineReferenceSearchEngineCreateSearchQueryConstMeta,
      argValues: [index, searchTerm, fuzzy],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReferenceSearchEngineReferenceSearchEngineCreateSearchQueryConstMeta =>
          const TaskConstMeta(
            debugName: "ReferenceSearchEngine_create_search_query",
            argNames: ["index", "searchTerm", "fuzzy"],
          );

  @override
  ReferenceSearchEngine crateApiReferenceSearchEngineReferenceSearchEngineNew(
      {required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiReferenceSearchEngineReferenceSearchEngineNewConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReferenceSearchEngineReferenceSearchEngineNewConstMeta =>
          const TaskConstMeta(
            debugName: "ReferenceSearchEngine_new",
            argNames: ["path"],
          );

  @override
  Future<List<ReferenceSearchResult>>
      crateApiReferenceSearchEngineReferenceSearchEngineSearch(
          {required ReferenceSearchEngine that,
          required String query,
          required int limit,
          required bool fuzzy,
          required ResultsOrder order}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
            that, serializer);
        sse_encode_String(query, serializer);
        sse_encode_u_32(limit, serializer);
        sse_encode_bool(fuzzy, serializer);
        sse_encode_results_order(order, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_reference_search_result,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiReferenceSearchEngineReferenceSearchEngineSearchConstMeta,
      argValues: [that, query, limit, fuzzy, order],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReferenceSearchEngineReferenceSearchEngineSearchConstMeta =>
          const TaskConstMeta(
            debugName: "ReferenceSearchEngine_search",
            argNames: ["that", "query", "limit", "fuzzy", "order"],
          );

  @override
  Future<void> crateApiSearchEngineSearchEngineAddDocument(
      {required SearchEngine that,
      required BigInt id,
      required String title,
      required String reference,
      required String topics,
      required String text,
      required BigInt segment,
      required bool isPdf,
      required String filePath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
            that, serializer);
        sse_encode_u_64(id, serializer);
        sse_encode_String(title, serializer);
        sse_encode_String(reference, serializer);
        sse_encode_String(topics, serializer);
        sse_encode_String(text, serializer);
        sse_encode_u_64(segment, serializer);
        sse_encode_bool(isPdf, serializer);
        sse_encode_String(filePath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSearchEngineSearchEngineAddDocumentConstMeta,
      argValues: [
        that,
        id,
        title,
        reference,
        topics,
        text,
        segment,
        isPdf,
        filePath
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSearchEngineSearchEngineAddDocumentConstMeta =>
      const TaskConstMeta(
        debugName: "SearchEngine_add_document",
        argNames: [
          "that",
          "id",
          "title",
          "reference",
          "topics",
          "text",
          "segment",
          "isPdf",
          "filePath"
        ],
      );

  @override
  Future<void> crateApiSearchEngineSearchEngineClear(
      {required SearchEngine that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSearchEngineSearchEngineClearConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSearchEngineSearchEngineClearConstMeta =>
      const TaskConstMeta(
        debugName: "SearchEngine_clear",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiSearchEngineSearchEngineCommit(
      {required SearchEngine that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSearchEngineSearchEngineCommitConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSearchEngineSearchEngineCommitConstMeta =>
      const TaskConstMeta(
        debugName: "SearchEngine_commit",
        argNames: ["that"],
      );

  @override
  Future<int> crateApiSearchEngineSearchEngineCount(
      {required SearchEngine that,
      required List<String> regexTerms,
      required List<String> facets,
      required int slop,
      required int maxExpansions}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
            that, serializer);
        sse_encode_list_String(regexTerms, serializer);
        sse_encode_list_String(facets, serializer);
        sse_encode_u_32(slop, serializer);
        sse_encode_u_32(maxExpansions, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_u_32,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSearchEngineSearchEngineCountConstMeta,
      argValues: [that, regexTerms, facets, slop, maxExpansions],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSearchEngineSearchEngineCountConstMeta =>
      const TaskConstMeta(
        debugName: "SearchEngine_count",
        argNames: ["that", "regexTerms", "facets", "slop", "maxExpansions"],
      );

  @override
  Future<BoxQuery> crateApiSearchEngineSearchEngineCreateQuery(
      {required Index index,
      required List<String> regexTerms,
      required List<String> facets,
      required int slop,
      required int maxExpansions}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
            index, serializer);
        sse_encode_list_String(regexTerms, serializer);
        sse_encode_list_String(facets, serializer);
        sse_encode_u_32(slop, serializer);
        sse_encode_u_32(maxExpansions, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSearchEngineSearchEngineCreateQueryConstMeta,
      argValues: [index, regexTerms, facets, slop, maxExpansions],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSearchEngineSearchEngineCreateQueryConstMeta =>
      const TaskConstMeta(
        debugName: "SearchEngine_create_query",
        argNames: ["index", "regexTerms", "facets", "slop", "maxExpansions"],
      );

  @override
  SearchEngine crateApiSearchEngineSearchEngineNew({required String path}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(path, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 13)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSearchEngineSearchEngineNewConstMeta,
      argValues: [path],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSearchEngineSearchEngineNewConstMeta =>
      const TaskConstMeta(
        debugName: "SearchEngine_new",
        argNames: ["path"],
      );

  @override
  Future<void> crateApiSearchEngineSearchEngineRemoveDocumentsByTitle(
      {required SearchEngine that, required String title}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
            that, serializer);
        sse_encode_String(title, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta:
          kCrateApiSearchEngineSearchEngineRemoveDocumentsByTitleConstMeta,
      argValues: [that, title],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSearchEngineSearchEngineRemoveDocumentsByTitleConstMeta =>
          const TaskConstMeta(
            debugName: "SearchEngine_remove_documents_by_title",
            argNames: ["that", "title"],
          );

  @override
  Future<List<SearchResult>> crateApiSearchEngineSearchEngineSearch(
      {required SearchEngine that,
      required List<String> regexTerms,
      required List<String> facets,
      required int limit,
      required int slop,
      required int maxExpansions,
      required ResultsOrder order}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
            that, serializer);
        sse_encode_list_String(regexTerms, serializer);
        sse_encode_list_String(facets, serializer);
        sse_encode_u_32(limit, serializer);
        sse_encode_u_32(slop, serializer);
        sse_encode_u_32(maxExpansions, serializer);
        sse_encode_results_order(order, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_search_result,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSearchEngineSearchEngineSearchConstMeta,
      argValues: [that, regexTerms, facets, limit, slop, maxExpansions, order],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSearchEngineSearchEngineSearchConstMeta =>
      const TaskConstMeta(
        debugName: "SearchEngine_search",
        argNames: [
          "that",
          "regexTerms",
          "facets",
          "limit",
          "slop",
          "maxExpansions",
          "order"
        ],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BoxQuery => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BoxQuery => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Index =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Index =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ReferenceSearchEngine => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ReferenceSearchEngine => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SearchEngine => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SearchEngine => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  BoxQuery
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxQueryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReferenceSearchEngine
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReferenceSearchEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SearchEngine
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SearchEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReferenceSearchEngine
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReferenceSearchEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SearchEngine
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SearchEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Index
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IndexImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReferenceSearchEngine
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReferenceSearchEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SearchEngine
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SearchEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  BoxQuery
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BoxQueryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Index
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return IndexImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ReferenceSearchEngine
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ReferenceSearchEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SearchEngine
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SearchEngineImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<ReferenceSearchResult> dco_decode_list_reference_search_result(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_reference_search_result)
        .toList();
  }

  @protected
  List<SearchResult> dco_decode_list_search_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_search_result).toList();
  }

  @protected
  ReferenceSearchResult dco_decode_reference_search_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return ReferenceSearchResult(
      title: dco_decode_String(arr[0]),
      reference: dco_decode_String(arr[1]),
      shortRef: dco_decode_String(arr[2]),
      id: dco_decode_u_64(arr[3]),
      segment: dco_decode_u_64(arr[4]),
      isPdf: dco_decode_bool(arr[5]),
      filePath: dco_decode_String(arr[6]),
    );
  }

  @protected
  ResultsOrder dco_decode_results_order(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ResultsOrder.values[raw as int];
  }

  @protected
  SearchResult dco_decode_search_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return SearchResult(
      title: dco_decode_String(arr[0]),
      reference: dco_decode_String(arr[1]),
      text: dco_decode_String(arr[2]),
      id: dco_decode_u_64(arr[3]),
      segment: dco_decode_u_64(arr[4]),
      isPdf: dco_decode_bool(arr[5]),
      filePath: dco_decode_String(arr[6]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  BoxQuery
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxQueryImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ReferenceSearchEngine
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReferenceSearchEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SearchEngine
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SearchEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ReferenceSearchEngine
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReferenceSearchEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SearchEngine
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SearchEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Index
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IndexImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ReferenceSearchEngine
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReferenceSearchEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SearchEngine
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SearchEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BoxQuery
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BoxQueryImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Index
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return IndexImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ReferenceSearchEngine
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ReferenceSearchEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SearchEngine
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SearchEngineImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<ReferenceSearchResult> sse_decode_list_reference_search_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ReferenceSearchResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_reference_search_result(deserializer));
    }
    return ans_;
  }

  @protected
  List<SearchResult> sse_decode_list_search_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SearchResult>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_search_result(deserializer));
    }
    return ans_;
  }

  @protected
  ReferenceSearchResult sse_decode_reference_search_result(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_reference = sse_decode_String(deserializer);
    var var_shortRef = sse_decode_String(deserializer);
    var var_id = sse_decode_u_64(deserializer);
    var var_segment = sse_decode_u_64(deserializer);
    var var_isPdf = sse_decode_bool(deserializer);
    var var_filePath = sse_decode_String(deserializer);
    return ReferenceSearchResult(
        title: var_title,
        reference: var_reference,
        shortRef: var_shortRef,
        id: var_id,
        segment: var_segment,
        isPdf: var_isPdf,
        filePath: var_filePath);
  }

  @protected
  ResultsOrder sse_decode_results_order(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return ResultsOrder.values[inner];
  }

  @protected
  SearchResult sse_decode_search_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_String(deserializer);
    var var_reference = sse_decode_String(deserializer);
    var var_text = sse_decode_String(deserializer);
    var var_id = sse_decode_u_64(deserializer);
    var var_segment = sse_decode_u_64(deserializer);
    var var_isPdf = sse_decode_bool(deserializer);
    var var_filePath = sse_decode_String(deserializer);
    return SearchResult(
        title: var_title,
        reference: var_reference,
        text: var_text,
        id: var_id,
        segment: var_segment,
        isPdf: var_isPdf,
        filePath: var_filePath);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          BoxQuery self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxQueryImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          ReferenceSearchEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ReferenceSearchEngineImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SearchEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SearchEngineImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          ReferenceSearchEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ReferenceSearchEngineImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SearchEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SearchEngineImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          Index self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IndexImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          ReferenceSearchEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ReferenceSearchEngineImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SearchEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SearchEngineImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          BoxQuery self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as BoxQueryImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          Index self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as IndexImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          ReferenceSearchEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ReferenceSearchEngineImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SearchEngine self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SearchEngineImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_reference_search_result(
      List<ReferenceSearchResult> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_reference_search_result(item, serializer);
    }
  }

  @protected
  void sse_encode_list_search_result(
      List<SearchResult> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_search_result(item, serializer);
    }
  }

  @protected
  void sse_encode_reference_search_result(
      ReferenceSearchResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.reference, serializer);
    sse_encode_String(self.shortRef, serializer);
    sse_encode_u_64(self.id, serializer);
    sse_encode_u_64(self.segment, serializer);
    sse_encode_bool(self.isPdf, serializer);
    sse_encode_String(self.filePath, serializer);
  }

  @protected
  void sse_encode_results_order(ResultsOrder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_search_result(SearchResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.title, serializer);
    sse_encode_String(self.reference, serializer);
    sse_encode_String(self.text, serializer);
    sse_encode_u_64(self.id, serializer);
    sse_encode_u_64(self.segment, serializer);
    sse_encode_bool(self.isPdf, serializer);
    sse_encode_String(self.filePath, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class BoxQueryImpl extends RustOpaque implements BoxQuery {
  // Not to be used by end users
  BoxQueryImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  BoxQueryImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_BoxQuery,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_BoxQuery,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_BoxQueryPtr,
  );
}

@sealed
class IndexImpl extends RustOpaque implements Index {
  // Not to be used by end users
  IndexImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  IndexImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Index,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Index,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_IndexPtr,
  );
}

@sealed
class ReferenceSearchEngineImpl extends RustOpaque
    implements ReferenceSearchEngine {
  // Not to be used by end users
  ReferenceSearchEngineImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ReferenceSearchEngineImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_ReferenceSearchEngine,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_ReferenceSearchEngine,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ReferenceSearchEnginePtr,
  );

  Future<void> addDocument(
          {required BigInt id,
          required String title,
          required String reference,
          required String shortRef,
          required BigInt segment,
          required bool isPdf,
          required String filePath}) =>
      RustLib.instance.api
          .crateApiReferenceSearchEngineReferenceSearchEngineAddDocument(
              that: this,
              id: id,
              title: title,
              reference: reference,
              shortRef: shortRef,
              segment: segment,
              isPdf: isPdf,
              filePath: filePath);

  Future<void> clear() => RustLib.instance.api
          .crateApiReferenceSearchEngineReferenceSearchEngineClear(
        that: this,
      );

  Future<void> commit() => RustLib.instance.api
          .crateApiReferenceSearchEngineReferenceSearchEngineCommit(
        that: this,
      );

  Future<int> count({required String query, required bool fuzzy}) =>
      RustLib.instance.api
          .crateApiReferenceSearchEngineReferenceSearchEngineCount(
              that: this, query: query, fuzzy: fuzzy);

  Future<List<ReferenceSearchResult>> search(
          {required String query,
          required int limit,
          required bool fuzzy,
          required ResultsOrder order}) =>
      RustLib.instance.api
          .crateApiReferenceSearchEngineReferenceSearchEngineSearch(
              that: this,
              query: query,
              limit: limit,
              fuzzy: fuzzy,
              order: order);
}

@sealed
class SearchEngineImpl extends RustOpaque implements SearchEngine {
  // Not to be used by end users
  SearchEngineImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SearchEngineImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SearchEngine,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SearchEngine,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SearchEnginePtr,
  );

  Future<void> addDocument(
          {required BigInt id,
          required String title,
          required String reference,
          required String topics,
          required String text,
          required BigInt segment,
          required bool isPdf,
          required String filePath}) =>
      RustLib.instance.api.crateApiSearchEngineSearchEngineAddDocument(
          that: this,
          id: id,
          title: title,
          reference: reference,
          topics: topics,
          text: text,
          segment: segment,
          isPdf: isPdf,
          filePath: filePath);

  Future<void> clear() =>
      RustLib.instance.api.crateApiSearchEngineSearchEngineClear(
        that: this,
      );

  Future<void> commit() =>
      RustLib.instance.api.crateApiSearchEngineSearchEngineCommit(
        that: this,
      );

  Future<int> count(
          {required List<String> regexTerms,
          required List<String> facets,
          required int slop,
          required int maxExpansions}) =>
      RustLib.instance.api.crateApiSearchEngineSearchEngineCount(
          that: this,
          regexTerms: regexTerms,
          facets: facets,
          slop: slop,
          maxExpansions: maxExpansions);

  Future<void> removeDocumentsByTitle({required String title}) =>
      RustLib.instance.api
          .crateApiSearchEngineSearchEngineRemoveDocumentsByTitle(
              that: this, title: title);

  Future<List<SearchResult>> search(
          {required List<String> regexTerms,
          required List<String> facets,
          required int limit,
          required int slop,
          required int maxExpansions,
          required ResultsOrder order}) =>
      RustLib.instance.api.crateApiSearchEngineSearchEngineSearch(
          that: this,
          regexTerms: regexTerms,
          facets: facets,
          limit: limit,
          slop: slop,
          maxExpansions: maxExpansions,
          order: order);
}
</file>

<file path="src/rust/frb_generated.io.dart">
// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/reference_search_engine.dart';
import 'api/search_engine.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BoxQueryPtr => wire
      ._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQueryPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_IndexPtr => wire
      ._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ReferenceSearchEnginePtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEnginePtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SearchEnginePtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEnginePtr;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  BoxQuery
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          dynamic raw);

  @protected
  ReferenceSearchEngine
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          dynamic raw);

  @protected
  SearchEngine
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          dynamic raw);

  @protected
  ReferenceSearchEngine
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          dynamic raw);

  @protected
  SearchEngine
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          dynamic raw);

  @protected
  Index
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          dynamic raw);

  @protected
  ReferenceSearchEngine
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          dynamic raw);

  @protected
  SearchEngine
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          dynamic raw);

  @protected
  BoxQuery
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          dynamic raw);

  @protected
  Index
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          dynamic raw);

  @protected
  ReferenceSearchEngine
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          dynamic raw);

  @protected
  SearchEngine
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<ReferenceSearchResult> dco_decode_list_reference_search_result(
      dynamic raw);

  @protected
  List<SearchResult> dco_decode_list_search_result(dynamic raw);

  @protected
  ReferenceSearchResult dco_decode_reference_search_result(dynamic raw);

  @protected
  ResultsOrder dco_decode_results_order(dynamic raw);

  @protected
  SearchResult dco_decode_search_result(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  BoxQuery
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          SseDeserializer deserializer);

  @protected
  ReferenceSearchEngine
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          SseDeserializer deserializer);

  @protected
  SearchEngine
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SseDeserializer deserializer);

  @protected
  ReferenceSearchEngine
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          SseDeserializer deserializer);

  @protected
  SearchEngine
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SseDeserializer deserializer);

  @protected
  Index
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          SseDeserializer deserializer);

  @protected
  ReferenceSearchEngine
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          SseDeserializer deserializer);

  @protected
  SearchEngine
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SseDeserializer deserializer);

  @protected
  BoxQuery
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          SseDeserializer deserializer);

  @protected
  Index
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          SseDeserializer deserializer);

  @protected
  ReferenceSearchEngine
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          SseDeserializer deserializer);

  @protected
  SearchEngine
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<ReferenceSearchResult> sse_decode_list_reference_search_result(
      SseDeserializer deserializer);

  @protected
  List<SearchResult> sse_decode_list_search_result(
      SseDeserializer deserializer);

  @protected
  ReferenceSearchResult sse_decode_reference_search_result(
      SseDeserializer deserializer);

  @protected
  ResultsOrder sse_decode_results_order(SseDeserializer deserializer);

  @protected
  SearchResult sse_decode_search_result(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          BoxQuery self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          ReferenceSearchEngine self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SearchEngine self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          ReferenceSearchEngine self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SearchEngine self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          Index self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          ReferenceSearchEngine self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SearchEngine self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          BoxQuery self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          Index self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          ReferenceSearchEngine self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SearchEngine self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_reference_search_result(
      List<ReferenceSearchResult> self, SseSerializer serializer);

  @protected
  void sse_encode_list_search_result(
      List<SearchResult> self, SseSerializer serializer);

  @protected
  void sse_encode_reference_search_result(
      ReferenceSearchResult self, SseSerializer serializer);

  @protected
  void sse_encode_results_order(ResultsOrder self, SseSerializer serializer);

  @protected
  void sse_encode_search_result(SearchResult self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQueryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_search_engine_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery');
  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery =
      _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQueryPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQueryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_search_engine_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery');
  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery =
      _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQueryPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_search_engine_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex');
  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex =
      _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_search_engine_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex');
  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex =
      _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndexPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEnginePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_search_engine_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine');
  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine =
      _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEnginePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEnginePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_search_engine_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine');
  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine =
      _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEnginePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEnginePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_search_engine_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine');
  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine =
      _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEnginePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEnginePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_search_engine_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine');
  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine =
      _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEnginePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();
}
</file>

<file path="src/rust/frb_generated.web.dart">
// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

// Static analysis wrongly picks the IO variant, thus ignore this
// ignore_for_file: argument_type_not_assignable

import 'api/reference_search_engine.dart';
import 'api/search_engine.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_BoxQueryPtr => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_IndexPtr => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ReferenceSearchEnginePtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SearchEnginePtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw);

  @protected
  BoxQuery
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          dynamic raw);

  @protected
  ReferenceSearchEngine
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          dynamic raw);

  @protected
  SearchEngine
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          dynamic raw);

  @protected
  ReferenceSearchEngine
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          dynamic raw);

  @protected
  SearchEngine
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          dynamic raw);

  @protected
  Index
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          dynamic raw);

  @protected
  ReferenceSearchEngine
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          dynamic raw);

  @protected
  SearchEngine
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          dynamic raw);

  @protected
  BoxQuery
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          dynamic raw);

  @protected
  Index
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          dynamic raw);

  @protected
  ReferenceSearchEngine
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          dynamic raw);

  @protected
  SearchEngine
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<ReferenceSearchResult> dco_decode_list_reference_search_result(
      dynamic raw);

  @protected
  List<SearchResult> dco_decode_list_search_result(dynamic raw);

  @protected
  ReferenceSearchResult dco_decode_reference_search_result(dynamic raw);

  @protected
  ResultsOrder dco_decode_results_order(dynamic raw);

  @protected
  SearchResult dco_decode_search_result(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  BigInt dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  BigInt dco_decode_usize(dynamic raw);

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer);

  @protected
  BoxQuery
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          SseDeserializer deserializer);

  @protected
  ReferenceSearchEngine
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          SseDeserializer deserializer);

  @protected
  SearchEngine
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SseDeserializer deserializer);

  @protected
  ReferenceSearchEngine
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          SseDeserializer deserializer);

  @protected
  SearchEngine
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SseDeserializer deserializer);

  @protected
  Index
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          SseDeserializer deserializer);

  @protected
  ReferenceSearchEngine
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          SseDeserializer deserializer);

  @protected
  SearchEngine
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SseDeserializer deserializer);

  @protected
  BoxQuery
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          SseDeserializer deserializer);

  @protected
  Index
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          SseDeserializer deserializer);

  @protected
  ReferenceSearchEngine
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          SseDeserializer deserializer);

  @protected
  SearchEngine
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<ReferenceSearchResult> sse_decode_list_reference_search_result(
      SseDeserializer deserializer);

  @protected
  List<SearchResult> sse_decode_list_search_result(
      SseDeserializer deserializer);

  @protected
  ReferenceSearchResult sse_decode_reference_search_result(
      SseDeserializer deserializer);

  @protected
  ResultsOrder sse_decode_results_order(SseDeserializer deserializer);

  @protected
  SearchResult sse_decode_search_result(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer);

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          BoxQuery self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          ReferenceSearchEngine self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SearchEngine self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          ReferenceSearchEngine self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SearchEngine self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          Index self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          ReferenceSearchEngine self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SearchEngine self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          BoxQuery self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          Index self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          ReferenceSearchEngine self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          SearchEngine self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_reference_search_result(
      List<ReferenceSearchResult> self, SseSerializer serializer);

  @protected
  void sse_encode_list_search_result(
      List<SearchResult> self, SseSerializer serializer);

  @protected
  void sse_encode_reference_search_result(
      ReferenceSearchResult self, SseSerializer serializer);

  @protected
  void sse_encode_results_order(ResultsOrder self, SseSerializer serializer);

  @protected
  void sse_encode_search_result(SearchResult self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);

  void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          int ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          int ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          int ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          int ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          int ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          int ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
              ptr);

  void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          int ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          int ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
              ptr);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
extension type RustLibWasmModule._(JSObject _) implements JSObject {
  external void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          int ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerBoxdynQuery(
          int ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          int ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerIndex(
          int ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          int ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerReferenceSearchEngine(
          int ptr);

  external void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          int ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSearchEngine(
          int ptr);
}
</file>

</files>
