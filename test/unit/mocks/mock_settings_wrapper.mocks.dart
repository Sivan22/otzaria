// Mocks generated by Mockito 5.4.4 from annotations
// in otzaria/test/unit/mocks/mock_settings_wrapper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:otzaria/utils/settings_wrapper.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SettingsWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsWrapper extends _i1.Mock implements _i2.SettingsWrapper {
  @override
  T getValue<T>(
    String? key, {
    required T? defaultValue,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getValue,
          [key],
          {#defaultValue: defaultValue},
        ),
        returnValue: _i3.dummyValue<T>(
          this,
          Invocation.method(
            #getValue,
            [key],
            {#defaultValue: defaultValue},
          ),
        ),
        returnValueForMissingStub: _i3.dummyValue<T>(
          this,
          Invocation.method(
            #getValue,
            [key],
            {#defaultValue: defaultValue},
          ),
        ),
      ) as T);

  @override
  _i4.Future<void> setValue<T>(
    String? key,
    T? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setValue,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
