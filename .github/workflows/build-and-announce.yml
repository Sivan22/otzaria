name: "Build, Release and Announce"

permissions:
  contents: write

on:
  push:
    branches:
      - main
      - dev
      - dev_dev2
      - n-search2
      - ns2new
      - n-search2.1

  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

  # טריגר לפרסום בלבד
  release:
    types: [published]

jobs:
  build_windows:
    if: github.event_name != 'release'
    runs-on: windows-2022
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Install Inno Setup (project script + fallback)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          if (Test-Path .\installer\install_inno_setup.ps1) {
            Write-Host "Running local installer script..."
            .\installer\install_inno_setup.ps1
          } else {
            Write-Host "Local installer script not found, skipping."
          }
          if (-not (Get-Command iscc -ErrorAction SilentlyContinue)) {
            if (Get-Command winget -ErrorAction SilentlyContinue) {
              Write-Host "Installing Inno Setup via winget..."
              winget install -e --id JRSoftware.InnoSetup --silent --accept-package-agreements --accept-source-agreements
            } else {
              Write-Host "winget not found, installing via Chocolatey..."
              choco install innosetup -y --no-progress
            }
          }
          $iscc = (Get-ChildItem "C:\Program Files*\Inno Setup*\ISCC.exe" -Recurse -ErrorAction SilentlyContinue |
                   Select-Object -First 1 -ExpandProperty FullName)
          if (-not $iscc) { throw "ISCC.exe not found after installation" }
          "ISCC=$iscc" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "ISCC resolved to: $iscc"
      
      - name: Build Flutter Windows app
        shell: pwsh
        run: |
          flutter build windows --release

      - name: Zip Windows build
        shell: pwsh
        run: |
          $relDir = Get-ChildItem -Directory build\windows |
                    Where-Object { Test-Path "$($_.FullName)\runner\Release" } |
                    Select-Object -First 1 -ExpandProperty FullName
          if (-not $relDir) { throw 'Release directory not found' }
          Compress-Archive -Path "$relDir\runner\Release\*" -DestinationPath otzaria-windows.zip

      - name: Build MSIX package
        shell: pwsh
        run: |
          dart run msix:create --install-certificate false

      - name: Build Inno Setup installer
        shell: pwsh
        run: |
          & "$env:ISCC" installer\otzaria.iss

      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: otzaria-windows-installer
          path: installer/otzaria-*-windows.exe

      - name: Upload Windows ZIP
        uses: actions/upload-artifact@v4
        with:
          name: otzaria-windows-zip
          path: otzaria-windows.zip

      - name: Upload Windows MSIX
        uses: actions/upload-artifact@v4
        with:
          name: otzaria.msix
          path: build/windows/x64/runner/release/*.msix

  build_linux:
    if: github.event_name != 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
      
      - name: Install Linux build dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev libblkid1 liblzma5 clang cmake git pkg-config liblzma-dev libstdc++-12-dev rpm patchelf
      
      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor
      
      - name: Build Flutter Linux app
        run: |
          flutter build linux
      
      - name: Build Linux DEB package
        run: flutter_distributor release --name=production --jobs=release-linux-deb
        
      - name: Build Linux RPM package  
        run: flutter_distributor release --name=production --jobs=release-linux-rpm
      
      - name: Find and prepare Linux packages
        id: find_packages
        run: |
          DEB_FILE=$(find dist/production/release-linux-deb -name "*.deb" | head -n 1)
          if [ -n "$DEB_FILE" ]; then
            echo "deb_file=$DEB_FILE" >> $GITHUB_OUTPUT
            echo "deb_name=$(basename $DEB_FILE)" >> $GITHUB_OUTPUT
          fi
          RPM_FILE=$(find dist/production/release-linux-rpm -name "*.rpm" | head -n 1)
          if [ -n "$RPM_FILE" ]; then
            echo "rpm_file=$RPM_FILE" >> $GITHUB_OUTPUT
            echo "rpm_name=$(basename $RPM_FILE)" >> $GITHUB_OUTPUT
          fi
          mkdir -p linux-build
          cp -r build/linux/x64/release/bundle/* linux-build/
      
      - name: Upload Linux DEB package
        if: steps.find_packages.outputs.deb_file != ''
        uses: actions/upload-artifact@v4
        with:
          name: otzaria-linux-deb
          path: ${{ steps.find_packages.outputs.deb_file }}
          
      - name: Upload Linux RPM package
        if: steps.find_packages.outputs.rpm_file != ''
        uses: actions/upload-artifact@v4
        with:
          name: otzaria-linux-rpm
          path: ${{ steps.find_packages.outputs.rpm_file }}
       
      - name: Upload linux build (raw)
        uses: actions/upload-artifact@v4
        with:
          name: otzaria-linux-raw
          path: linux-build/*

  build_android:
    if: github.event_name != 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
      
      - run: sudo apt install ninja-build
      
      - name: Build Android APK
        run: |
          flutter pub get
          flutter build apk
      
      - name: Upload apk
        uses: actions/upload-artifact@v4
        with:
          name: otzaria-android.apk
          path: build/app/outputs/flutter-apk/app-release.apk

  build_macos:
    if: github.event_name != 'release'
    runs-on: macos-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
      
      - name: Build Flutter macOS app
        run: |
          flutter build macos
     
      - name: Upload macos build
        uses: actions/upload-artifact@v4
        with:
          name: otzaria-macos.app
          path: build/macos/Build/Products/Release

  create_release:
    if: github.event_name != 'release'
    needs: [build_windows, build_linux, build_android, build_macos]
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Get version from pubspec.yaml
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2 | cut -d '+' -f 1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "tag=v$VERSION" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "title=Otzaria v$VERSION" >> $GITHUB_OUTPUT
          else
            echo "tag=v$VERSION-${{ github.ref_name }}-${{ github.run_number }}" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "title=Otzaria v$VERSION (Preview from ${{ github.ref_name }})" >> $GITHUB_OUTPUT
          fi


      - name: Get commit message
        id: commit
        run: echo "message=$(git log -1 --pretty=%s)" >> $GITHUB_OUTPUT

      - name: Organize release files
        run: |
          mkdir -p release-files
          
          # Windows installer
          if [ -d "artifacts/otzaria-windows-installer" ]; then
            cp artifacts/otzaria-windows-installer/*.exe release-files/ || true
          fi
          
          # Windows ZIP
          if [ -d "artifacts/otzaria-windows-zip" ]; then
            cp artifacts/otzaria-windows-zip/*.zip release-files/ || true
          fi

          # Windows MSIX
          if [ -d "artifacts/otzaria.msix" ]; then
            cp artifacts/otzaria.msix/*.msix release-files/ || true
          fi

          # Linux DEB package
          if [ -d "artifacts/otzaria-linux-deb" ]; then
            cp artifacts/otzaria-linux-deb/*.deb release-files/ || true
          fi
          
          # Linux RPM package  
          if [ -d "artifacts/otzaria-linux-rpm" ]; then
            cp artifacts/otzaria-linux-rpm/*.rpm release-files/ || true
          fi
          
          # Linux raw build (fallback)
          if [ -d "artifacts/otzaria-linux-raw" ] && [ ! -f release-files/*.deb ]; then
            cd artifacts/otzaria-linux-raw
            zip -r ../../release-files/otzaria-linux-raw.zip *
            cd ../..
          fi
          
          # Android APK
          if [ -d "artifacts/otzaria-android.apk" ]; then
            cp artifacts/otzaria-android.apk/*.apk release-files/ || true
          fi
          
          # macOS app 
          if [ -d "artifacts/otzaria-macos.app" ]; then
          cd artifacts/otzaria-macos.app
          zip -r ../../release-files/otzaria-macos.zip *
          cd ../..
          fi
          
          # List files for debugging
          echo "Release files:"
          ls -la release-files/
      
      - name: Create Release
        if: github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: ${{ steps.version.outputs.title }}
          prerelease: ${{ steps.version.outputs.prerelease }}
          files: release-files/*
          body: |
            ## Changes in this release
            Built from commit: ${{ github.sha }} - ${{ steps.commit.outputs.message }}
            Branch: ${{ github.ref_name }}
            
            ### Downloads:
            - **Windows**: Download the `.exe` installer
            - **Windows (.msix)**: Download the `.msix` package
            - **Windows (.zip)**: Download the `.zip` archive
            - **Linux (Debian/Ubuntu)**: Download the `.deb` package and install with `sudo dpkg -i <filename>.deb`
            - **Linux (Fedora/RHEL)**: Download the `.rpm` package and install with `sudo dnf localinstall <filename>.rpm`
            - **Linux (Generic)**: Download the `.zip` file and extract
            - **Android**: Install the `.apk` file
            - **macOS**: Download and extract the `.zip` file
            
            ${{ github.ref_name == 'dev' && '⚠️ **This is a development build** - Use at your own risk!' || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  create_pr_prerelease:
    if: github.event_name == 'pull_request' 
    needs: [build_windows, build_linux, build_android, build_macos]
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Get version from pubspec.yaml
        id: version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | cut -d ' ' -f 2 | cut -d '+' -f 1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION-pr-${{ github.event.number }}-${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "title=Otzaria v$VERSION - PR #${{ github.event.number }} Preview" >> $GITHUB_OUTPUT

      - name: Get commit message
        id: commit
        run: echo "message=$(git log -1 --pretty=%s)" >> $GITHUB_OUTPUT

      - name: Organize release files
        run: |
          mkdir -p release-files
          
          # Windows installer
          if [ -d "artifacts/otzaria-windows-installer" ]; then
            cp artifacts/otzaria-windows-installer/*.exe release-files/ || true
          fi
          
          # Linux DEB package
          if [ -d "artifacts/otzaria-linux-deb" ]; then
            cp artifacts/otzaria-linux-deb/*.deb release-files/ || true
          fi
          
          # Linux RPM package  
          if [ -d "artifacts/otzaria-linux-rpm" ]; then
            cp artifacts/otzaria-linux-rpm/*.rpm release-files/ || true
          fi
          
          # Linux raw build (fallback)
          if [ -d "artifacts/otzaria-linux-raw" ] && [ ! -f release-files/*.deb ]; then
            cd artifacts/otzaria-linux-raw
            zip -r ../../release-files/otzaria-linux-raw.zip *
            cd ../..
          fi
          
          # Android APK
          if [ -d "artifacts/otzaria-android.apk" ]; then
            cp artifacts/otzaria-android.apk/*.apk release-files/ || true
          fi
          
          # macOS app 
          if [ -d "artifacts/otzaria-macos.app" ]; then
          cd artifacts/otzaria-macos.app
          zip -r ../../release-files/otzaria-macos.zip *
          cd ../..
          fi
          
          # List files for debugging
          echo "Release files:"
          ls -la release-files/
      
      - name: Create PR Pre-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: ${{ steps.version.outputs.title }}
          prerelease: true
          files: release-files/*
          body: |
            ## 🔄 PR Preview Build #${{ github.event.number }}
            **This is a preview build for testing PR changes before merge.**
            
            ### PR Information:
            - **PR Title**: ${{ github.event.pull_request.title }}
            - **PR Author**: @${{ github.event.pull_request.user.login }}
            - **PR Number**: #${{ github.event.number }}
            - **Branch**: `${{ github.head_ref }}` → `${{ github.base_ref }}`
            
            ### PR Description:
            ${{ github.event.pull_request.body }}
            
            ---
            Built from commit: ${{ github.sha }} - ${{ steps.commit.outputs.message }}
            
            ### Downloads:
            - **Windows**: Download the `.exe` installer
            - **Windows (.msix)**: Download the `.msix` package
            - **Windows (.zip)**: Download the `.zip` archive
            - **Linux (Debian/Ubuntu)**: Download the `.deb` package and install with `sudo dpkg -i <filename>.deb`
            - **Linux (Fedora/RHEL)**: Download the `.rpm` package and install with `sudo dnf localinstall <filename>.rpm`
            - **Linux (Generic)**: Download the `.zip` file and extract
            - **Android**: Install the `.apk` file
            - **macOS**: Download and extract the `.zip` file
            
            ⚠️ **This is a preview build for testing purposes** - Use at your own risk!
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # --- הכרזה על גרסה שפורסמה ---
  announce_release:
    # תנאי לריצה רק כשיש אירוע של פרסום release
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history + tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # חובה כדי לאפשר גישה לכל ההיסטוריה והתגים
          fetch-tags: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies for webhook script
        run: pip install bs4 requests pyluach

      - name: Build commit list since previous release
        id: changelog
        shell: bash
        run: |
          set -euo pipefail
          CURRENT_TAG="${{ github.event.release.tag_name }}"
          git fetch --tags --force
          
          # מצא את התג הקודם (הכי עדכני שהוא לא התג הנוכחי)
          PREV_TAG=$(git for-each-ref --sort=-creatordate --format '%(refname:strip=2)' refs/tags | grep -v "^$CURRENT_TAG$" | head -n1 || true)

          if [ -n "$PREV_TAG" ]; then
            RANGE="$PREV_TAG..$CURRENT_TAG"
            # צור רשימה של כותרות הקומיטים בטווח
            COMMITS=$(git log --pretty=format:'- %s' "$RANGE" || true)
          else
            # אם אין תג קודם, קח רק את הקומיט של התג הנוכחי
            SHA=$(git rev-list -n 1 "$CURRENT_TAG")
            COMMITS=$(git log --pretty=format:'- %s' "${SHA}^..${SHA}" || true)
          fi

          if [ -z "${COMMITS// /}" ]; then
            COMMITS="(לא נמצאו כותרות קומיטים חדשות להצגה)"
          fi

          # העבר את רשימת הקומיטים והתג הקודם לשלבים הבאים
          {
            echo "prev_tag=${PREV_TAG}"
            echo "commits<<EOF"
            echo "$COMMITS"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Run announcement script (Mitmachim + Yemot)
        env:
          # פרטי ה-Release נלקחים מאירוע ה-Webhook של GitHub
          RELEASE_TAG:  ${{ github.event.release.tag_name }}
          RELEASE_NAME: ${{ github.event.release.name }}
          RELEASE_URL:  ${{ github.event.release.html_url }}
          GITHUB_EVENT_PATH: ${{ github.event_path }} # חיוני כדי שהסקריפט ימצא את קבצי ההורדה

          # הרכבת גוף ההודעה: התיאור מה-Release + רשימת הקומיטים שיצרנו
          RELEASE_BODY: |
            ${{ github.event.release.body }}

            השינויים מאז הגרסה הקודמת${{ steps.changelog.outputs.prev_tag && format(' ({0})', steps.changelog.outputs.prev_tag) || '' }}:
            ${{ steps.changelog.outputs.commits }}

          # סודות להתחברות לשירותים החיצוניים
          USER_NAME:  ${{ secrets.USER_NAME }}
          PASSWORD:   ${{ secrets.PASSWORD }}
          TOKEN_YEMOT: ${{ secrets.TOKEN_YEMOT }}
        run: |
          python webhooks/main.py